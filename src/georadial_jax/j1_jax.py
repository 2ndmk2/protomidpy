import jax.numpy as jnp

RP = jnp.array([-8.99971225705559398224E8, 4.52228297998194034323E11, -7.27494245221818276015E13, 3.68295732863852883286E15])
RQ = jnp.array([1, 6.20836478118054335476E2, 2.56987256757748830383E5, 8.35146791431949253037E7, 2.21511595479792499675E10,4.74914122079991414898E12,7.84369607876235854894E14,8.95222336184627338078E16,5.32278620332680085395E18])
DR1 = 5.78318596294678452118E0
DR2 = 3.04712623436620863991E1
PP = jnp.array([7.62125616208173112003E-4, 7.31397056940917570436E-2, 1.12719608129684925192E0, 5.11207951146807644818E0,8.42404590141772420927E0,5.21451598682361504063E0,1.00000000000000000254E0])
PQ = jnp.array([5.71323128072548699714E-4, 6.88455908754495404082E-2, 1.10514232634061696926E0, 5.07386386128601488557E0,8.39985554327604159757E0,5.20982848682361821619E0,9.99999999999999997461E-1])
QP = jnp.array([ 5.10862594750176621635E-2,4.98213872951233449420E0,7.58238284132545283818E1,3.66779609360150777800E2,7.10856304998926107277E2,5.97489612400613639965E2,2.11688757100572135698E2,2.52070205858023719784E1])
QQ = jnp.array([1., 7.42373277035675149943E1, 1.05644886038262816351E3, 4.98641058337653607651E3, 9.56231892404756170795E3, 7.99704160447350683650E3, 2.82619278517639096600E3, 3.36093607810698293419E2])
PIO4 = 0.78539816339744830962
SQ2OPI = 0.79788456080286535588
THPIO4=2.35619449019234492885
Z1 = 1.46819706421238932572E1;
Z2 = 4.92184563216946036703E1;

def j1_jax(x):
    """Bessel function of the 1st kind, order=0.
    This codes uses the implemenation in bessel.tgz at https://www.netlib.org/cephes/ for scipy
    
    Args:
       x: x

    Returns:
       J1
    """
    x = jnp.where(x > 0., x, -x)

    z = x * x
    ret = x/2

    p = (z - Z1) * (z - Z2)
    p = p * jnp.polyval(RP, z) / jnp.polyval(RQ, z) * x
    ret = jnp.where(x < 1e-5, ret, p)

    # required for autograd not to fail when x includes 0
    xinv5 = jnp.where(x <= 5., 0., 1./(x+1e-10))
    w = 5.0 * xinv5
    z = w * w
    p = jnp.polyval(PP, z) / jnp.polyval(PQ, z)
    q = jnp.polyval(QP, z) / jnp.polyval(QQ, z)
    xn = x - THPIO4
    p = p * jnp.cos(xn) - w * q * jnp.sin(xn)
    ret = jnp.where(x <= 5., ret, p * SQ2OPI * jnp.sqrt(xinv5))

    return ret